// Generated by CoffeeScript 2.4.1
export var Analytics = class Analytics {
  constructor(report_url, user_id, place, debug = false) {
    this.report_url = report_url;
    this.user_id = user_id;
    this.place = place;
    this.debug = debug;
    this.reportInterval = 15;
    this.idleTimeout = 30;
    this.started = false;
    this.stopped = false;
    this.turnedOff = false;
    this.clockTime = 0;
    this.startTime = new Date();
    this.clockTimer = null;
    this.idleTimer = null;
    // Basic activity event listeners
    document.addEventListener('keydown', this.trigger.bind(this), false);
    document.addEventListener('click', this.trigger.bind(this), false);
    window.addEventListener('mousemove', _.throttle(this.trigger.bind(this), 500), false);
    window.addEventListener('scroll', _.throttle(this.trigger.bind(this), 500), false);
    // Page visibility listeners
    document.addEventListener('visibilitychange', this.visibilityChange.bind(this), false);
    document.addEventListener('webkitvisibilitychange', this.visibilityChange.bind(this), false);
  }

  visibilityChange() {
    if (document.hidden || document.webkitHidden) {
      return this.setIdle();
    }
  }

  trigger() {
    if (this.turnedOff) {
      return;
    }
    if (!this.started) {
      this.startLogger();
    }
    if (this.stopped) {
      this.restartClock();
    }
    clearTimeout(this.idleTimer);
    return this.idleTimer = setTimeout(this.setIdle.bind(this), this.idleTimeout * 1000 + 100);
  }

  setIdle() {
    clearTimeout(this.idleTimer);
    return this.stopClock();
  }

  stopClock() {
    this.stopped = true;
    return clearInterval(this.clockTimer);
  }

  restartClock() {
    this.stopped = false;
    clearInterval(this.clockTimer);
    return this.clockTimer = setInterval(this.clock.bind(this), 1000);
  }

  clock() {
    this.clockTime += 1;
    if (this.clockTime > 0 && (this.clockTime % this.reportInterval === 0)) {
      return this.sendEvent(this.clockTime);
    }
  }

  sendEvent(time) {
    var data;
    data = {
      user_id: this.user_id,
      type: 1, // Time Spent Event
      time: time,
      report_interval: this.report_interval,
      place: this.place
    };
    return this.sendReport(data);
  }

  restartClock() {
    this.stopped = false;
    clearInterval(this.clockTimer);
    return this.clockTimer = setInterval(this.clock.bind(this), 1000);
  }

  startLogger() {
    var currentTime, diff;
    // Calculate seconds from start to first interaction
    currentTime = new Date();
    diff = currentTime - this.startTime;
    this.started = true;
    this.sendUserTiming(diff);
    return this.clockTimer = setInterval(this.clock.bind(this), 1000);
  }

  sendUserTiming(timingValue) {
    var data;
    data = {
      user_id: this.user_id,
      href: window.location.href
    };
    // type: 2 # First Interaction
    // host: window.location.host
    // path: window.location.pathname
    return this.sendReport(data);
  }

  sendReport(data) {
    return fetch(this.report_url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json;charset=utf-8'
      },
      body: JSON.stringify(data)
    });
  }

  reset() {
    this.startTime = new Date();
    this.clockTime = 0;
    this.started = false;
    this.stopped = false;
    clearInterval(this.clockTimer);
    return clearTimeout(this.idleTimer);
  }

  turnOff() {
    this.setIdle();
    return this.turnedOff = true;
  }

  turnOn() {
    return this.turnedOff = false;
  }

};

// a = new Analytics 'http://localhost:3334/reports'
